(function() {
  var BaseLanguage, spawn,
    __hasProp = Object.prototype.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  spawn = require('child_process').spawn;

  BaseLanguage = require('./base').BaseLanguage;

  exports.SassLanguage = (function(_super) {

    __extends(SassLanguage, _super);

    function SassLanguage() {
      SassLanguage.__super__.constructor.apply(this, arguments);
      this.process = spawn('sass');
    }

    SassLanguage.prototype.compile = function(path, callback) {
      var _this = this;
      return this.readFile(path, function(error, data) {
        var options, result, sass;
        if (error != null) return callback(error);
        result = '';
        error = null;
        options = ['--stdin', '--load-path', _this.getRootPath('app', 'styles'), '--no-cache'];
        if (/\.scss$/.test(path)) options.push('--scss');
        sass = spawn('sass', options);
        sass.stdin.end(data);
        sass.stdout.on('data', function(data) {
          return result = data;
        });
        sass.stderr.on('data', function(data) {
          return error = data;
        });
        return sass.on('exit', function(code) {
          return callback(error, result.toString());
        });
      });
    };

    return SassLanguage;

  })(BaseLanguage);

}).call(this);
